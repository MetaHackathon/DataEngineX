-- ============================================================================
-- MIGRATION: Knowledge Canvas Tables for Long Context Analysis
-- Version: 004
-- Description: Database tables to support knowledge canvas and deep research insights
--              ADDS: New long context analysis capabilities alongside existing features
-- ============================================================================

-- ============================================================================
-- KNOWLEDGE CANVAS TABLES
-- ============================================================================

-- Table to store knowledge canvases generated by Llama 4
CREATE TABLE IF NOT EXISTS knowledge_canvases (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  knowledge_base_id UUID NOT NULL REFERENCES knowledge_bases(id) ON DELETE CASCADE,
  user_id UUID NOT NULL,
  title TEXT NOT NULL,
  paper_network JSONB NOT NULL DEFAULT '{}',
  research_themes JSONB NOT NULL DEFAULT '[]',
  methodology_evolution JSONB NOT NULL DEFAULT '{}',
  research_timeline JSONB NOT NULL DEFAULT '[]',
  cross_paper_insights JSONB NOT NULL DEFAULT '[]',
  research_gaps JSONB NOT NULL DEFAULT '[]',
  future_opportunities JSONB NOT NULL DEFAULT '[]',
  collaboration_suggestions JSONB NOT NULL DEFAULT '[]',
  paper_count INTEGER DEFAULT 0,
  analysis_depth TEXT DEFAULT 'deep',
  processing_time FLOAT DEFAULT 0.0,
  confidence_score FLOAT DEFAULT 0.0,
  llama_model TEXT DEFAULT 'llama-4',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Table to store deep connection analyses between papers
CREATE TABLE IF NOT EXISTS paper_connection_analyses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  paper_ids UUID[] NOT NULL,
  analysis_types TEXT[] NOT NULL DEFAULT ARRAY['methodology', 'findings', 'theoretical'],
  connections JSONB NOT NULL DEFAULT '[]',
  themes JSONB NOT NULL DEFAULT '[]',
  contradictions JSONB NOT NULL DEFAULT '[]',
  knowledge_gaps JSONB NOT NULL DEFAULT '[]',
  synthesis_opportunities JSONB NOT NULL DEFAULT '[]',
  collaboration_potential JSONB NOT NULL DEFAULT '[]',
  confidence_scores JSONB NOT NULL DEFAULT '{}',
  connection_depth TEXT DEFAULT 'deep',
  processing_time FLOAT DEFAULT 0.0,
  llama_model TEXT DEFAULT 'llama-4',
  created_at TIMESTAMP DEFAULT NOW()
);

-- Table to store research insights generated by long context analysis
CREATE TABLE IF NOT EXISTS research_insights (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  context_type TEXT NOT NULL, -- 'knowledge_base', 'paper_collection', 'search_results'
  context_id UUID NOT NULL,
  insight_types TEXT[] NOT NULL DEFAULT ARRAY['trends', 'gaps', 'opportunities'],
  insights JSONB NOT NULL DEFAULT '[]',
  trending_topics JSONB NOT NULL DEFAULT '[]',
  emerging_methodologies JSONB NOT NULL DEFAULT '[]',
  research_opportunities JSONB NOT NULL DEFAULT '[]',
  collaboration_suggestions JSONB NOT NULL DEFAULT '[]',
  actionable_next_steps JSONB NOT NULL DEFAULT '[]',
  confidence_assessment JSONB NOT NULL DEFAULT '{}',
  supporting_evidence JSONB NOT NULL DEFAULT '{}',
  time_horizon TEXT DEFAULT 'mixed',
  processing_time FLOAT DEFAULT 0.0,
  llama_model TEXT DEFAULT 'llama-4',
  created_at TIMESTAMP DEFAULT NOW()
);

-- Table to track intelligent search sessions and their context
CREATE TABLE IF NOT EXISTS intelligent_search_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID NOT NULL,
  research_question TEXT NOT NULL,
  knowledge_base_id UUID REFERENCES knowledge_bases(id) ON DELETE SET NULL,
  query_strategies JSONB NOT NULL DEFAULT '[]',
  candidate_papers JSONB NOT NULL DEFAULT '[]',
  ranked_papers JSONB NOT NULL DEFAULT '[]',
  research_insights JSONB NOT NULL DEFAULT '{}',
  total_candidates INTEGER DEFAULT 0,
  max_papers INTEGER DEFAULT 25,
  confidence_score FLOAT DEFAULT 0.0,
  processing_time FLOAT DEFAULT 0.0,
  llama_model TEXT DEFAULT 'llama-4',
  created_at TIMESTAMP DEFAULT NOW()
);

-- ============================================================================
-- INDEXES FOR PERFORMANCE
-- ============================================================================

-- Knowledge canvas indexes
CREATE INDEX IF NOT EXISTS idx_knowledge_canvases_kb ON knowledge_canvases(knowledge_base_id);
CREATE INDEX IF NOT EXISTS idx_knowledge_canvases_user ON knowledge_canvases(user_id);
CREATE INDEX IF NOT EXISTS idx_knowledge_canvases_created ON knowledge_canvases(created_at DESC);
CREATE INDEX IF NOT EXISTS idx_knowledge_canvases_paper_count ON knowledge_canvases(paper_count);

-- Connection analysis indexes
CREATE INDEX IF NOT EXISTS idx_paper_connections_user ON paper_connection_analyses(user_id);
CREATE INDEX IF NOT EXISTS idx_paper_connections_papers ON paper_connection_analyses USING gin(paper_ids);
CREATE INDEX IF NOT EXISTS idx_paper_connections_created ON paper_connection_analyses(created_at DESC);

-- Research insights indexes
CREATE INDEX IF NOT EXISTS idx_research_insights_user ON research_insights(user_id);
CREATE INDEX IF NOT EXISTS idx_research_insights_context ON research_insights(context_type, context_id);
CREATE INDEX IF NOT EXISTS idx_research_insights_created ON research_insights(created_at DESC);

-- Intelligent search indexes
CREATE INDEX IF NOT EXISTS idx_intelligent_search_user ON intelligent_search_sessions(user_id);
CREATE INDEX IF NOT EXISTS idx_intelligent_search_kb ON intelligent_search_sessions(knowledge_base_id);
CREATE INDEX IF NOT EXISTS idx_intelligent_search_created ON intelligent_search_sessions(created_at DESC);

-- ============================================================================
-- FULL-TEXT SEARCH INDEXES FOR RESEARCH CONTENT
-- ============================================================================

-- Search within knowledge canvas content
CREATE INDEX IF NOT EXISTS idx_knowledge_canvases_research_themes ON knowledge_canvases USING gin(research_themes);
CREATE INDEX IF NOT EXISTS idx_knowledge_canvases_insights ON knowledge_canvases USING gin(cross_paper_insights);

-- Search within research insights
CREATE INDEX IF NOT EXISTS idx_research_insights_content ON research_insights USING gin(insights);
CREATE INDEX IF NOT EXISTS idx_research_insights_topics ON research_insights USING gin(trending_topics);

-- ============================================================================
-- UTILITY FUNCTIONS FOR KNOWLEDGE CANVAS
-- ============================================================================

-- Function to get knowledge canvas with related data
CREATE OR REPLACE FUNCTION get_knowledge_canvas_details(p_canvas_id UUID)
RETURNS JSON AS $$
DECLARE
  result JSON;
BEGIN
  SELECT json_build_object(
    'canvas', to_json(kc.*),
    'knowledge_base', json_build_object(
      'id', kb.id,
      'name', kb.name,
      'description', kb.description,
      'paper_count', (SELECT COUNT(*) FROM knowledge_base_papers WHERE knowledge_base_id = kb.id)
    ),
    'paper_details', (
      SELECT json_agg(
        json_build_object(
          'id', p.id,
          'title', p.title,
          'authors', p.authors,
          'year', p.year,
          'topics', p.topics
        )
      )
      FROM knowledge_base_papers kbp
      JOIN papers p ON p.id = kbp.paper_id
      WHERE kbp.knowledge_base_id = kc.knowledge_base_id
    )
  ) INTO result
  FROM knowledge_canvases kc
  JOIN knowledge_bases kb ON kb.id = kc.knowledge_base_id
  WHERE kc.id = p_canvas_id;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get user's recent research activity across all tools
CREATE OR REPLACE FUNCTION get_user_research_activity(p_user_id UUID, p_limit INTEGER DEFAULT 20)
RETURNS JSON AS $$
DECLARE
  result JSON;
BEGIN
  WITH recent_activity AS (
    SELECT 'knowledge_canvas' as activity_type, id, title as name, created_at, paper_count as metadata
    FROM knowledge_canvases 
    WHERE user_id = p_user_id
    
    UNION ALL
    
    SELECT 'connection_analysis' as activity_type, id, 
           'Connection Analysis (' || array_length(paper_ids, 1) || ' papers)' as name, 
           created_at, array_length(paper_ids, 1) as metadata
    FROM paper_connection_analyses 
    WHERE user_id = p_user_id
    
    UNION ALL
    
    SELECT 'research_insights' as activity_type, id, 
           'Research Insights (' || context_type || ')' as name,
           created_at, array_length(insight_types, 1) as metadata
    FROM research_insights 
    WHERE user_id = p_user_id
    
    UNION ALL
    
    SELECT 'intelligent_search' as activity_type, id,
           'Smart Search: ' || LEFT(research_question, 50) as name,
           created_at, total_candidates as metadata
    FROM intelligent_search_sessions 
    WHERE user_id = p_user_id
    
    ORDER BY created_at DESC
    LIMIT p_limit
  )
  SELECT json_agg(
    json_build_object(
      'activity_type', activity_type,
      'id', id,
      'name', name,
      'created_at', created_at,
      'metadata', metadata
    )
  ) INTO result
  FROM recent_activity;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Function to get research trends from knowledge canvases
CREATE OR REPLACE FUNCTION get_research_trends(p_user_id UUID DEFAULT NULL, p_months INTEGER DEFAULT 6)
RETURNS JSON AS $$
DECLARE
  result JSON;
BEGIN
  WITH canvas_themes AS (
    SELECT 
      unnest(research_themes) as theme_data,
      created_at
    FROM knowledge_canvases kc
    WHERE (p_user_id IS NULL OR kc.user_id = p_user_id)
      AND created_at >= NOW() - INTERVAL '1 month' * p_months
  ),
  theme_trends AS (
    SELECT 
      (theme_data->>'theme') as theme,
      COUNT(*) as frequency,
      AVG(EXTRACT(EPOCH FROM (NOW() - created_at)) / 86400)::int as avg_days_ago,
      array_agg(DISTINCT theme_data->>'maturity') as maturity_levels
    FROM canvas_themes
    WHERE theme_data->>'theme' IS NOT NULL
    GROUP BY theme_data->>'theme'
    ORDER BY frequency DESC, avg_days_ago ASC
    LIMIT 20
  )
  SELECT json_build_object(
    'trending_themes', json_agg(
      json_build_object(
        'theme', theme,
        'frequency', frequency,
        'avg_days_ago', avg_days_ago,
        'maturity_levels', maturity_levels,
        'trend_score', CASE 
          WHEN avg_days_ago < 30 THEN frequency * 2.0
          WHEN avg_days_ago < 60 THEN frequency * 1.5
          ELSE frequency * 1.0
        END
      )
    ),
    'analysis_period_months', p_months,
    'total_canvases_analyzed', (
      SELECT COUNT(*) 
      FROM knowledge_canvases 
      WHERE (p_user_id IS NULL OR user_id = p_user_id)
        AND created_at >= NOW() - INTERVAL '1 month' * p_months
    )
  ) INTO result
  FROM theme_trends;
  
  RETURN result;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================================
-- ROW LEVEL SECURITY POLICIES
-- ============================================================================

-- Enable RLS on new tables
ALTER TABLE knowledge_canvases ENABLE ROW LEVEL SECURITY;
ALTER TABLE paper_connection_analyses ENABLE ROW LEVEL SECURITY;
ALTER TABLE research_insights ENABLE ROW LEVEL SECURITY;
ALTER TABLE intelligent_search_sessions ENABLE ROW LEVEL SECURITY;

-- Policies for knowledge_canvases
CREATE POLICY "Users can view their own knowledge canvases" ON knowledge_canvases
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can create their own knowledge canvases" ON knowledge_canvases
  FOR INSERT WITH CHECK (user_id = auth.uid());

CREATE POLICY "Users can update their own knowledge canvases" ON knowledge_canvases
  FOR UPDATE USING (user_id = auth.uid());

CREATE POLICY "Users can delete their own knowledge canvases" ON knowledge_canvases
  FOR DELETE USING (user_id = auth.uid());

-- Policies for paper_connection_analyses
CREATE POLICY "Users can view their own connection analyses" ON paper_connection_analyses
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can create their own connection analyses" ON paper_connection_analyses
  FOR INSERT WITH CHECK (user_id = auth.uid());

-- Policies for research_insights
CREATE POLICY "Users can view their own research insights" ON research_insights
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can create their own research insights" ON research_insights
  FOR INSERT WITH CHECK (user_id = auth.uid());

-- Policies for intelligent_search_sessions
CREATE POLICY "Users can view their own search sessions" ON intelligent_search_sessions
  FOR SELECT USING (user_id = auth.uid());

CREATE POLICY "Users can create their own search sessions" ON intelligent_search_sessions
  FOR INSERT WITH CHECK (user_id = auth.uid()); 